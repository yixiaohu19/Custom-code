
from pyqtgraph.Qt import QtCore, QtGui
import numpy as np
import pyqtgraph.opengl as gl
import pyqtgraph.ptime as ptime
import serial,struct,numpy


## Create a GL View widget to display data
app = QtGui.QApplication([])
w = gl.GLViewWidget()
w.show()
w.setWindowTitle('pyqtgraph example: GLSurfacePlot')
w.setCameraPosition(distance=120)

g = gl.GLGridItem()
g.scale(4,4,2)
g.setDepthValue(10)  # draw grid after surfaces since they may be translucent
w.addItem(g)
updateTime = ptime.time()
fps = 0
def initSerial():
    try:
        ser = serial.Serial("COM4", 2000000, parity = serial.PARITY_NONE) 
        print("get ser")                                                   
        return ser                                                          
    except:
        print("can't open ser")
        return None

def getFramepreamble(ser):   
    while (1):
        B = ser.read(1)
        if (B == b'\x88'):
            #print("match 1")
            B = ser.read(1)
            if (B == b'\xFF'):
                #print("match 2")
                B = ser.read(1)
                if (B == b'\xAA'):
                    #print("match 3")
                    B = ser.read(1)
                    if (B == b'\x55'):
                        #print("find preamble")

                        break
        else:
            print("not match", B)

def getFramedata(ser):              
    line = ser.read(8320)           
    global frame
    frame = numpy.array(struct.unpack('>4160H', line)[0:]).reshape(64,65)   
    x = []
    for i in range (0,16):
        for j in range (0,16):
            x = x + [frame[i][j]]
    frame = numpy.array(x).reshape(16, 16)

def getstartFramedata(ser):              
    getFramepreamble(ser)
    line = ser.read(8320)           
    global zero
    start = numpy.array(struct.unpack('>4160H', line)[0:]).reshape(64,65)   
    x=[]
    for i in range (0,30):
        for j in range (0,30):
            x = x + [start[i][j]]
    zero = numpy.array(x).reshape(30,30)
    print(zero)


## Animated example
## compute surface vertex data
cols = 29
rows = 29
x = np.linspace(-31, 31, cols+1).reshape(cols+1,1)
y = np.linspace(-31, 32, rows+1).reshape(1,rows+1)


## precompute height values for all frames

## create a surface plot, tell it to use the 'heightColor' shader
## since this does not require normal vectors to render (thus we 
## can set computeNormals=False to save time when the mesh updates)
p4 = gl.GLSurfacePlotItem(x=x[:,0], y = y[0,:], shader ="heightColor", computeNormals=False, smooth=False)
p4.shader()['colorMap'] = np.array([0.02, 3, 0.5, 0.01, 0.7, 0.7, 0.01, 0, 2])
p4.translate(10, 10, -8)
w.addItem(p4)


index = 0
def update():
    global p4, index, z, updateTime, fps
    getFramepreamble(ser)
    getFramedata(ser)
    z = 25*frame/zero
    p4.setData(z=z)
    w.addItem(p4)
    QtCore.QTimer.singleShot(1, update)   
    now = ptime.time()                        
    fps2 = 1.0 / (now - updateTime)           
    updateTime = now
    fps = fps * 0.9 + fps2 * 0.1
    #z = np.random.normal(size=(2, 64, 65), loc=1024, scale=64).astype(np.uint16)
    #p4.setData(z)

global ser     
ser = initSerial()
getstartFramedata(ser)

update()
print(frame)

## Start Qt event loop unless running in interactive mode.
if __name__ == '__main__':
    import sys
    if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
        QtGui.QApplication.instance().exec_()